{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/register/register.component.css","webpack:///./src/app/register/register.component.html","webpack:///./src/app/register/register.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<app-login></app-login>\\n<app-register></app-register>\\n\"","import { Component } from '@angular/core';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { FormsModule} from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    RegisterComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\"","module.exports = \"<div id=\\\"login-content\\\">\\n  <form id=\\\"login-form\\\">\\n    <input type=\\\"text\\\" [(ngModel)]=\\\"email\\\" placeholder=\\\"E-mail\\\" name=\\\"email\\\"><br>\\n    <input type=\\\"password\\\" [(ngModel)]=\\\"password\\\" placeholder=\\\"Password\\\" name=\\\"password\\\"><br>\\n    <button (click)=\\\"onLoginButtonClicked()\\\">Login</button>\\n    <button (click)=\\\"onRegButtonClicked()\\\">Register</button>\\n  </form>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { RegisterComponent } from '../register/register.component';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  isRegister : boolean = false;\n  isLogin : boolean = true;\n  email : string = this.email;\n  password : string = this.password;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  onLoginButtonClicked() {\n    if (this.email == null) {\n      console.log(\"E-mail can not be empty!\");\n      return;\n    }\n    if (this.password == null) {\n      console.log(\"Password can not be empty!\");\n      return;\n    }\n  }\n\n  onRegButtonClicked() {\n    this.isRegister = true;\n    this.isLogin = false;\n  }\n}\n","module.exports = \"\"","module.exports = \"<div id=\\\"register-content\\\" *ngIf=\\\"isRegister\\\">\\n    <form id=\\\"register-form\\\">\\n      <input type=\\\"text\\\" [(ngModel)]=\\\"email\\\" placeholder=\\\"E-mail\\\" name=\\\"email\\\"><br>\\n      <input type=\\\"password\\\" [(ngModel)]=\\\"password\\\" placeholder=\\\"Password\\\" name=\\\"password\\\"><br>\\n      <input type=\\\"password\\\" [(ngModel)]=\\\"confpassword\\\" placeholder=\\\"Confirm Password\\\" name=\\\"confpassword\\\"><br>\\n      <button (click)=\\\"onRegisterButtonClicked()\\\">Register</button>\\n      <button (click)=\\\"onBackButtonClicked()\\\">Back</button>\\n    </form>\\n  </div>\"","import { Component, OnInit } from '@angular/core';\nimport { LoginComponent } from '../login/login.component';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  email : string = this.email;\n  password : string = this.password;\n  confpassword : string = this.confpassword;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  onRegisterButtonClicked() {\n\n  }\n\n  onBackButtonClicked() {\n    \n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}